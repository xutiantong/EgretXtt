import Matrix2D from "./Matrix2D";class MatrixTransformer {    public static getScaleX(m: Matrix2D) {        return Math.sqrt(m.a * m.a + m.b * m.b);    }    public static setScaleX(m: Matrix2D, scaleX: number) {        var a = m.a;        var b = m.b;        var old = Math.sqrt(a * a + b * b);        if (old) {            var ratio = scaleX / old;            m.a *= ratio;            m.b *= ratio;        }        else {            var skewY = Math.atan2(b, a);            m.a = Math.cos(skewY) * scaleX;            m.b = Math.sin(skewY) * scaleX;        }    }    public static getScaleY(m: Matrix2D) {        return Math.sqrt(m.c * m.c + m.d * m.d);    }    public static setScaleY(m: Matrix2D, scaleY: number) {        var c = m.c;        var d = m.d;        var old = Math.sqrt(c * c + d * d);        if (old) {            var ratio = scaleY / old;            m.c *= ratio;            m.d *= ratio;        }        else {            var skewX = Math.atan2(-c, d);            m.c = -Math.sin(skewX) * scaleY;            m.d = Math.cos(skewX) * scaleY;        }    }    public static getSkewXRadians(m: Matrix2D) {        return Math.atan2(-m.c, m.d);    }    public static setSkewXRadians(m: Matrix2D, skewX: number) {        var scaleY = Math.sqrt(m.c * m.c + m.d * m.d);        m.c = -scaleY * Math.sin(skewX);        m.d = scaleY * Math.cos(skewX);    }    public static getSkewYRadians(m: Matrix2D) {        return Math.atan2(m.b, m.a);    }    public static setSkewYRadians(m: Matrix2D, skewY: number) {        var scaleX = Math.sqrt(m.a * m.a + m.b * m.b);        m.a = scaleX * Math.cos(skewY);        m.b = scaleX * Math.sin(skewY);    }    public static getSkewX(m: Matrix2D) {        return Math.atan2(-m.c, m.d) * 57.29577951308232;    }    public static setSkewX(m: Matrix2D, skewX) {        MatrixTransformer.setSkewXRadians(m, skewX * 0.017453292519943295);    }    public static getSkewY(m: Matrix2D) {        return Math.atan2(m.b, m.a) * 57.29577951308232;    }    public static setSkewY(m: Matrix2D, skewY) {        MatrixTransformer.setSkewYRadians(m, skewY * 0.017453292519943295);    }    public static getRotationRadians(m: Matrix2D) {        return Math.atan2(m.b, m.a);    }    public static setRotationRadians(m: Matrix2D, rotation: number) {        var a = m.a;        var b = m.b;        var c = m.c;        var d = m.d;        var oldRotation = Math.atan2(b, a);        var oldSkewX = Math.atan2(-c, d);        var skewX = oldSkewX + rotation - oldRotation;        var skewY = rotation;        var scaleY = Math.sqrt(c * c + d * d);        var scaleX = Math.sqrt(a * a + b * b);        m.c = -scaleY * Math.sin(skewX);        m.d = scaleY * Math.cos(skewX);        m.a = scaleX * Math.cos(skewY);        m.b = scaleX * Math.sin(skewY);    }    public static getRotation(m: Matrix2D) {        return Math.atan2(m.b, m.a) * 57.29577951308232;//1弧度约为57.3°    }    public static setRotation(m: Matrix2D, rotation: number) {        MatrixTransformer.setRotationRadians(m, rotation * 0.017453292519943295);//1°为π/180弧度,近似值为0.01745    }}